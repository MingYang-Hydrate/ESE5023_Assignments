TMP_adjust <- TMP - TMP_components$seasonal
aic <- matrix(NA,6*6*3,2)
n =1
#i代表p，j代表d，k代表q
for (p in 0:5) {
for (d in 0:2) {
for (q in 0:5) {
model1 <- arima(TMP_adjust,order = c(p,d,q))
aic[n,1] = model1$aic
aic[n,2] = paste(p,d,q)
n = n+1
}
}
}
min_aic <- which(aic[,1]==min(aic[,1]))
aic[min_aic,]
TMP_components$seasonal
season <- TMP_components$seasonal
season1 <- diff(season)
season1 <- diff(season)
acf(season1)
pacf(season1)
model
season1 <- diff(season,12)
acf(season1)
pacf(season1)
season1 <- diff(season,12)
acf(season1)
pacf(season1)
season
season1
season1 <- diff(season)
season1
acf(season)
pacf(season)
season1 <- diff(season)
acf(season1)
pacf(season1)
acf(TMP)
pacf(TMP)
acf(TMP1)
pacf(TMP1)
TMP1 <- diff(TMP,12)
acf(TMP1)
pacf(TMP1)
acf(TMP)
pacf(TMP)
months_forecast  <- 2
months_in_plot   <- 12
forecast <- forecast(model, months_forecast)
forecast
forecast1 <- forecast(model2, months_forecast)
forecast1
model2 <- auto.arima(TMP,seasonal = FALSE)
model2
aic <- matrix(NA,6*6*3,2)
n =1
for (p in 0:5) {
for (d in 0:2) {
for (q in 0:5) {
model1 <- arima(TMP,order = c(p,d,q))
aic[n,1] = model1$aic
aic[n,2] = paste(p,d,q)
n = n+1
}
}
}
min_aic <- which(aic[,1]==min(aic[,1]))
aic[min_aic,]
TMP_adjust <- TMP - TMP_components$seasonal
aic <- matrix(NA,6*6*3,2)
n =1
for (p in 0:5) {
for (d in 0:2) {
for (q in 0:5) {
model1 <- arima(TMP_adjust,order = c(p,d,q))
aic[n,1] = model1$aic
aic[n,2] = paste(p,d,q)
n = n+1
}
}
}
min_aic <- which(aic[,1]==min(aic[,1]))
aic[min_aic,]
aic <- matrix(NA,27,2)
n =1
for (p in 0:2) {
for (d in 0:2) {
for (q in 0:2) {
model1 <- arima(TMP,order = c(p,d,q))
aic[n,1] = model1$aic
aic[n,2] = paste(p,d,q)
n = n+1
}
}
}
min_aic <- which(aic[,1]==min(aic[,1]))
aic[min_aic,]
model2
aic <- matrix(NA,48,2)
n =1
for (p in 0:3) {
for (d in 0:2) {
for (q in 0:3) {
model1 <- arima(TMP,order = c(p,d,q))
aic[n,1] = model1$aic
aic[n,2] = paste(p,d,q)
n = n+1
}
}
}
min_aic <- which(aic[,1]==min(aic[,1]))
aic[min_aic,]
View(aic)
TMP_adjust <- TMP - TMP_components$seasonal
aic <- matrix(NA,6*6*3,2)
n =1
for (p in 0:5) {
for (d in 0:2) {
for (q in 0:5) {
model1 <- arima(TMP_adjust,order = c(p,d,q))
aic[n,1] = model1$aic
aic[n,2] = paste(p,d,q)
n = n+1
}
}
}
min_aic <- which(aic[,1]==min(aic[,1]))
aic[min_aic,]
arima(TMP_adjust,order = c(3,0,5))
aic <- matrix(NA,75,2)
n =1
for (p in 0:4) {
for (d in 0:2) {
for (q in 0:4) {
model1 <- arima(TMP,order = c(p,d,q))
aic[n,1] = model1$aic
aic[n,2] = paste(p,d,q)
n = n+1
}
}
}
min_aic <- which(aic[,1]==min(aic[,1]))
aic[min_aic,]
model2
months_forecast  <- 2
months_in_plot   <- 12
forecast <- forecast(model, months_forecast)
forecast
# Plot predictions along with real values
plot(forecast(model, months_forecast), include = months_in_plot , xlab="Time",
ylab="temperature",type="b",lwd=2)
View(data4_21)
View(data4_2)
setwd('C:/Users/ping ping/Desktop/Assignment/Assignment_04_hzp')
data4_2 <- read.csv('2281305.csv',header = T)
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
library(forecast)
#整理数据，保留日期（monthly）和月平均温度（℃）
data4_21 <- data4_2 %>%
mutate(tem = as.numeric(substr(TMP,2,5))) %>%
filter(tem != 9999) %>%
mutate(tem = 0.1*tem) %>%
mutate(date = substr(DATE,1,7) ) %>%
select(date,tem) %>%
group_by(date) %>%
summarize(monthly_tem = mean(tem))
View(data4_21)
forecast
500-462/500
(500-462)/500
(500.064-462.259)/500.064
(500.064-462.259)/462.259
# Lab 04
# COVID-19 daily cases
#--------------------------------------------
# 1.1
# Load libraries
library(dplyr)
library(lubridate)
library(forecast)
#--------------------------------------------
# 1.2
# Read in the COVID-19 data
COVID_data <- read.csv(file = "C:/Users/ping ping/Desktop/lab/lab4/data_20201108.csv", header = T)
# Check the variable names
head(COVID_data)
# Convert the data.frame to a tibble
COVID_tbl <- as_tibble(COVID_data)
#--------------------------------------------
# 1.3
# Get global daily new cases
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
#--------------------------------------------
# 1.4
# Quick plot
plot(COVID_tbl$dateRep,COVID_tbl$global_cases,
type="l",xlab="Date",ylab="Global cases")
#--------------------------------------------
# 1.5
# Filter the data
# Only use data from April 01
COVID_tbl <- COVID_tbl %>%
filter(dateRep >= as.Date("2020-04-01"))
#--------------------------------------------
# 1.6
# Convert to ts
# Start date of the time series, read from the .csv file
Date_start <- as.Date("2020-04-01")
# End date of the time series, read from the .csv file
Date_end   <- as.Date("2020-11-08")
# Get the Julian Day of the end date
JD_start   <- yday(Date_start)
# Convert the vector data to a time series
global_cases_ts <- ts(COVID_tbl$global_cases[1:222], start=c(2020,JD_start),frequency=365)
# The indicator of the time series
inds            <- seq(Date_start, Date_end, by = "day")
# Check structure
str(global_cases_ts)
# Plot time series
plot(inds,global_cases_ts)
#--------------------------------------------
# 1.7
# Data transform with log
global_cases_ts_log <- log(global_cases_ts)
# Plot time series
plot(inds,global_cases_ts_log)
# Check acf and pacf
acf(global_cases_ts_log)
pacf(global_cases_ts_log)
#--------------------------------------------
# 1.8
# Take the diff, d=1
global_cases_ts_log_d1 <- diff(global_cases_ts_log)
# Plot time series
plot(global_cases_ts_log_d1)
# Check acf and pacf
acf(global_cases_ts_log_d1)
pacf(global_cases_ts_log_d1)
#--------------------------------------------
# 1.9
# Automated forecasting using an ARIMA model
model <- auto.arima(global_cases_ts_log)
#--------------------------------------------
# 1.10
# Make predictions
days_forecast  <- 30
days_in_plot   <- 30
forecast_15days <- forecast(model, days_forecast)
# Plot predictions along with real values
plot(forecast(model, days_forecast), include = days_in_plot, xlab="Time",
ylab="log(global cases)",type="o",lwd=2)
#--------------------------------------------
# 1.11
# Get predicted values
# Nov 09
day_forward <- yday(as.Date("2020-11-09")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
# Nov 30
day_forward <- yday(as.Date("2020-11-30")) - yday(Date_end)
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
#--------------------------------------------
forecast
(29.042-28.80)/28.80*100
(26.401-25.764)/25.764*100
setwd('C:/Users/ping ping/Desktop/Assignment/Assignment_04_hzp')
library(ggplot2)
library(dplyr)
library(tidyr)
#加载美国爱荷华州五个观测站的降水数据
data4_1 <- read.csv('PRCP.csv',header = T)
data4_1 <- as_tibble(data4_1)
data4_11 <- data4_1 %>%
mutate(y_m = as.character(paste(YEAR,MONTH,15,sep = "-"))) %>%
mutate(group = paste(y_m,NAME)) %>%
group_by(group) %>%
summarize(PRCP_mon =  sum(PRCP,na.rm = TRUE)) %>%
mutate(name = factor(gsub(" ","",substr(group,11,nchar(group))))) %>%
#https://www.imooc.com/wenda/detail/585314 学习了命令nchar(),计算字符串长度
#https://blog.csdn.net/weixin_43718786/article/details/107614620 学习了命令gsub(),替换字符串中的指定内容
#绘图
ggplot(aes(x = name, y = PRCP_mon, fill = name)) +
geom_boxplot() +
labs(title="monthly total precipitation from 2005 to 2019", x="City",
y="monthly total precipitation(mm)") +
theme_bw() +
theme(plot.title=element_text(size=20, face="bold"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=15),
axis.title.y=element_text(size=15)) +
scale_fill_discrete(name="City")
data4_11
data4_12 <- data4_1 %>%
mutate(DATE = as.Date(paste(YEAR,MONTH,DAY,sep = "-"))) %>%
#绘图,由于数据较多且较为相似，因此将其绘制在多个坐标系中
ggplot( aes(x=DATE, y=PRCP, color=NAME) ) +
geom_line() +
labs(title="precipitation from 2005 to 2019", x="Date", y="precipitation(mm)") +
theme_bw() +
theme(plot.title=element_text(size=20, face="bold"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=15),
axis.title.y=element_text(size=15)) +
scale_fill_discrete(name="City") +
facet_wrap( ~ NAME)
data4_12
#基于与箱线图相同的原因，直方图也使用逐月的降水数据
data4_13 <- data4_1 %>%
mutate(y_m = as.character(paste(YEAR,MONTH,15,sep = "-"))) %>%
mutate(group = paste(y_m,NAME)) %>%
group_by(group) %>%
summarize(PRCP_mon =  sum(PRCP,na.rm = TRUE)) %>%
mutate(name = factor(gsub(" ","",substr(group,11,nchar(group))))) %>%
#绘图
ggplot(aes(x = PRCP_mon, fill = name)) +
geom_histogram() +
labs(title="monthly total precipitation from 2005 to 2019", x="monthly total precipitation(mm)",
y="frequency") +
theme_bw() +
theme(plot.title=element_text(size=20, face="bold"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=15),
axis.title.y=element_text(size=15)) +
scale_fill_discrete(name="City") +
facet_wrap( ~ name)
data4_13
data4_1 %>%
mutate(y_m = as.character(paste(YEAR,MONTH,15,sep = "-"))) %>%
mutate(group = paste(y_m,NAME)) %>%
group_by(group) %>%
summarize(PRCP_mon =  sum(PRCP,na.rm = TRUE)) %>%
mutate(name = factor(gsub(" ","",substr(group,11,nchar(group))))) %>%
#绘图
ggplot(aes(x = PRCP_mon, fill = name)) +
geom_bar() +
labs(title="monthly total precipitation from 2005 to 2019", x="monthly total precipitation(mm)",
y="frequency") +
theme_bw() +
theme(plot.title=element_text(size=20, face="bold"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=15),
axis.title.y=element_text(size=15)) +
scale_fill_discrete(name="City") +
facet_wrap( ~ name)
### Scatter plot
#散点图使用逐月的降水数据，选择城市为ROCKWELLCITY和SACCITY
data4_14 <- data4_1 %>%
mutate(y_m = as.character(paste(YEAR,MONTH,15,sep = "-"))) %>%
mutate(group = paste(y_m,NAME)) %>%
group_by(group) %>%
summarize(PRCP_mon =  sum(PRCP,na.rm = TRUE)) %>%
mutate(name = factor(gsub(" ","",substr(group,11,nchar(group))))) %>%
select(PRCP_mon,name) %>%
mutate(a = 1) %>%
mutate(b = PRCP_mon)
ROC <- data4_14 %>%
filter(name == "ROCKWELLCITY,IAUS")
SAC <- data4_14 %>%
filter(name == "SACCITY,IAUS")
a <- ROC[,1]
a[,2] <- SAC[,1]
colnames(a) <- c('ROC','SAC')
lm <- lm(SAC ~ ROC, data = a)
#绘图
plot_point <- a %>%
ggplot(aes(x=ROC, y=SAC)) +
#在ggplot中添加回归线：https://blog.csdn.net/weixin_40575651/article/details/107575012?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.compare&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.compare
geom_abline(slope = lm$coefficients[2], intercept = lm$coefficients[1],
color = "red", size = 1, alpha = 0.5) +
geom_point(color="blue") +
labs(title="monthly total precipitation from 2005 to 2019", x="ROCKWELLCITY",
y="SACCITY") +
theme_bw() +
theme(plot.title=element_text(size=20, face="bold"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(size=15),
axis.title.y=element_text(size=15))
plot_point
#绘制今年一月份全球的ndvi（归一化植被指数），数据来源为Giovanni
library(fields)
library(maps)
library(RNetCDF)
#加载RColorBrewer包，用于绘制绿色的渐变色：https://www.jianshu.com/p/4e6fb1269ece
library(RColorBrewer)
ex.nc     <- open.nc("g4.subsetted.MOD13C2_006_CMG_0_05_Deg_Monthly_NDVI.20200101.180W_90S_180E_90N.nc")
print.nc(ex.nc)
Lat <- var.get.nc(ex.nc, "lat")
Lon <- var.get.nc(ex.nc, "lon")
NDVI <- var.get.nc(ex.nc, "MOD13C2_006_CMG_0_05_Deg_Monthly_NDVI")
close.nc(ex.nc)
#绘图这一步会非常慢！！！
#ndvi没有海洋的数据，此外由于MODIS范围为南北纬60°左右，因此南北极无数据
image.plot(Lon, Lat, NDVI,
col=brewer.pal(7,"Greens"),
horizontal=T,useRaster=T,
legend.shrink=0.75, axis.args=list(cex.axis = 1.25),
legend.width=1, legend.mar=2,
legend.args=list(text="ndvi",cex=1.25),
xlab='',ylab='',midpoint=T, axes=F, ann=F
)
title(xlab="",cex.lab=1.25,font.lab=2)
axis(1,at=pretty(Lon),tck=-0.015,lwd=2,cex.axis=1.25,font=1)
title(ylab="",cex.lab=1.25,font.lab=2)
axis(2,at=pretty(Lat),tck=-0.015,lwd=2,cex.axis=1.25,font=1,las=1)
title(main=paste("global ndvi in 2020.1"),
cex.main=1,font.main=2)
map('world',add=T,lwd=0.75,col="black")
box(lwd=2)
setwd('C:/Users/ping ping/Desktop/Assignment/Assignment_04_hzp')
#数据缺少一部分九月的值和全部十月值，下载这些数据并补充在2281305.csv中
data4_2 <- read.csv('2281305.csv',header = T)
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
library(forecast)
#整理数据，保留日期（monthly）和月平均温度（℃）
data4_21 <- data4_2 %>%
mutate(tem = as.numeric(substr(TMP,2,5))) %>%
filter(tem != 9999) %>%
mutate(tem = 0.1*tem) %>%
mutate(date = substr(DATE,1,7) ) %>%
select(date,tem) %>%
group_by(date) %>%
summarize(monthly_tem = mean(tem))
TMP <- ts(data4_21$monthly_tem, start=c(2010,1),end = c(2020,8), frequency=12)
plot(TMP)
TMP_components <- decompose(TMP)
plot(TMP_components)
hist(TMP_components$random, prob=TRUE,ylim = c(0,0.4))
# 添加pdf
curve(dnorm(x, mean=mean(TMP_components$random,na.rm=T),
sd=sd(TMP_components$random,na.rm=T)),
add=TRUE, col="red")
#Box.test : https://blog.csdn.net/qq_36810398/article/details/88876429
Box.test(TMP_components$random,type='Ljung-Box')
# p-value = 0.01904 < 0.05, 遵循高斯白噪声分布
acf(TMP)
pacf(TMP)
model <- auto.arima(TMP)
model
#得到的模型为ARIMA(0,0,2)(1,1,1)[12]
#该模型的推导过程如下，推导过程与王超同学进行了讨论
#第一组参数(0,0,2)代表去除季节性的ARIMA模型，是满足p = 0:5,q = 0:5,d = 0:2的条件下获得所有模型中，AIC最小的那个,可以通过以下方法验证
#AIC最小的原则来自于知乎，但页面关闭后无法找回原网址了
#p，q取值均为0:5;由于TMP是平稳的，因此d = 0:2,否则要根据差分情况确定d的取值
TMP_adjust <- TMP - TMP_components$seasonal
aic <- matrix(NA,6*6*3,2)
n =1
for (p in 0:2) {
for (d in 0:2) {
for (q in 0:2) {
model1 <- arima(TMP_adjust,order = c(p,d,q))
aic[n,1] = model1$aic
aic[n,2] = paste(p,d,q)
n = n+1
}
}
}
min_aic <- which(aic[,1]==min(aic[,1]))
aic[min_aic,]
TMP_adjust <- TMP - TMP_components$seasonal
aic <- matrix(NA,6*3*6,2)
n =1
for (p in 0:5) {
for (d in 0:2) {
for (q in 0:5) {
model1 <- arima(TMP_adjust,order = c(p,d,q))
aic[n,1] = model1$aic
aic[n,2] = paste(p,d,q)
n = n+1
}
}
}
min_aic <- which(aic[,1]==min(aic[,1]))
aic[min_aic,]
TMP_components$seasonal
TMP_components$seasonal
TMP1 <- diff(TMP,12)
acf(TMP1)
pacf(TMP1)
months_forecast  <- 2
months_in_plot   <- 12
forecast <- forecast(model, months_forecast)
forecast
plot(forecast(model, months_forecast), include = months_in_plot , xlab="Time",
ylab="temperature",type="b",lwd=2)
# Sep:
# Predicted value: 29.042 (27.607, 30.478)
# Real value: 28.800
# Relative bias:
(29.042-28.800)/28.800*100
#Oct
# Predicted value: 26.401 (24.935, 27.868)
# Real value: 25.764
# Relative bias:
(26.401-25.764)/25.764*100
